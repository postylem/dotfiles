"Custom pandoc markdown viewing
"based on http://subhadig.net/preview-markdown-files-from-vim-the-easy-way.html
"Author: Jacob Louis Hoover, github.com/postylem

" View markdown files as HTML on browser
let s:browser='open'
" or, set explicitly, like:
"let s:browser='/Applications/Brave\ Browser.app/Contents/MacOS/Brave\ Browser'

""""""
" Old version in vimscript. Ugh.

"function! s:Pandoc_CSS(use_tufte, use_mermaid, use_custom_tufte_css)
"  " use -C (= --citeproc) for pandoc's citations extension (e.g. @chomsky.n:1975)
"  " use -s (= --standalone) flag so it makes a complete XHTML file output
"  " use --katex flag to set the renderer for math.
"  let s:flags_list=[
"        \ '--standalone',
"        \ '--citeproc',
"        \ '--katex',
"        \ '--toc'
"        \ ] + g:pandpvw_additional_flags
"  if a:use_mermaid
"    " to render mermaid codeboxes as diagrams
"    let s:flags_list=s:flags_list + ['--filter mermaid-filter']
"  endif
"  let s:global_bib_file=expand('~/all.bib')
"  let s:reference_section_title='References'
"  let s:whether_link_citations='true'
"  let s:metadata_list = [
"        \ 'bibliography=' . s:global_bib_file,
"        \ 'reference-section-title=' . s:reference_section_title,
"        \ 'link-citations=' . s:whether_link_citations
"        \ ]
"  " the cli arguments for pandoc
"  let s:flags = join(s:flags_list)

"  " add the additional flags for tufte-css formatting
"  if a:use_tufte
"    let s:flags_list_tufte = [
"          \ '--filter pandoc-sidenote',
"          \ '--section-divs',
"          \ '--to html5+smart'
"          \ ]

"    let s:pandoc_css_dir='~/.config/nvim/PandocPreviewer/tufte-pandoc-css'
"    let s:tufte_css_file=s:pandoc_css_dir . '/tufte-css/tufte.css'
"    let s:pandoc_template=s:pandoc_css_dir . '/tufte'
"    let s:css_file_list = [
"        \ s:tufte_css_file,
"        \ s:pandoc_css_dir . '/pandoc.css',
"        \ s:pandoc_css_dir . '/pandoc-solarized.css',
"        \ s:pandoc_css_dir . '/tufte-extra.css'
"        \ ]
"    if a:use_custom_tufte_css
"      let s:css_file_list=s:css_file_list + g:pandpvw_custom_tufte_css
"    endif
"    let s:flags .= ' ' . join(s:flags_list_tufte)
"    let s:flags .= ' --css ' . join(s:css_file_list, ' --css ')
"    let s:flags .= ' --template ' . s:pandoc_template
"  endif

"  let s:flags .= ' --metadata ' . join(s:metadata_list, ' --metadata ')
"endfunction

"" global setting to decide whether to use the tufte formatting or not
"let g:pandpvw_use_tufte=v:true
"" global setting to decide whether to use mermaid filter or not
"let g:pandpvw_use_mermaid=v:false
"" use custom css to modify pandoc tufte css
"let g:pandpvw_use_custom_tufte_css=v:true
"" list custom css files here, which will be included last
"let g:pandpvw_custom_tufte_css=['~/.config/nvim/PandocPreviewer/custom.css']
"" any other flags to pass to pandoc.  Add others like ['--self-contained']
"let g:pandpvw_additional_flags=[]

"""
"" Renders the current buffer to an html file with the same name + '.html'.
"function! s:RenderHTML_old()
"  call s:Pandoc_CSS(g:pandpvw_use_tufte, g:pandpvw_use_mermaid, g:pandpvw_use_custom_tufte_css)
"  execute "silent !pandoc " . s:flags . " " . "'%:p'" . " --output" . " '%:p'" . ".html"
"endfunction

"""
"" Removes (what is presumed to be) the pandoc-rendered html file
"" corresponding to the current buffer. Be careful if there's another file
"" with the same name ending with '.md.html', not generated by RenderHTML
"function! s:RemoveHTML_old()
"  execute "silent !" . "rm " . "'%:p'" . ".html &"
"endfunction

"""
"" Renders the current buffer and opens a browser window.
"" Automatically deletes the html file when any key is pressed.
"function! s:ViewHTML_old()
"  call s:RenderHTML()
"  execute "silent !" . s:browser . " " . "'%:p'" . ".html &"
"  echo "HTML preview generated.  Type any character to return, and remove preview."
"  call getchar()
"  call s:RemoveHTML()
"endfunction

""""""""
" Here's a new version that just uses a bash script.

""
" Renders the current buffer to an html file with the same name + '.html'.
function! s:RenderHTML()
  execute "! /Users/j/Documents/GitLab/logs/use-pandoc-local.sh %:p %:p.html"
endfunction

""
" Removes (what is presumed to be) the pandoc-rendered html file
" corresponding to the current buffer. Be careful if there's another file
" with the same name ending with '.md.html', not generated by RenderHTML
function! s:RemoveHTML()
  execute "silent !" . "rm " . "'%:p'" . ".html &"
endfunction

""
" Renders the current buffer and opens a browser window.
" Automatically deletes the html file when any key is pressed.
function! s:ViewHTML()
  call s:RenderHTML()
  execute "silent !" . s:browser . " " . "'%:p'" . ".html &"
  echo "HTML preview generated.  Type any character to return, and remove preview."
  call getchar()
  call s:RemoveHTML()
endfunction




" The filetypes for which this plugin can be used
let g:pandpvw_filetypes = ["pandoc"]

function! s:init_command() abort
  command! -buffer PandocPreviewViewHTML call s:ViewHTML()
  command! -buffer PandocPreviewRenderHTML call s:RenderHTML()
  command! -buffer PandocPreviewRemoveHTML call s:RemoveHTML()

  " Custom key bindings
  nnoremap <buffer> <localleader>v :PandocPreviewViewHTML<cr>
  nnoremap <buffer> <localleader>m :PandocPreviewRenderHTML<cr>
  nnoremap <buffer> <localleader>dd :PandocPreviewRemoveHTML<cr>
endfunction

function! s:init() abort
  augroup pandpvw_init
    autocmd!
    autocmd BufEnter,FileType * if index(g:pandpvw_filetypes, &filetype) >= 0 | call s:init_command() | endif
  augroup END
endfunction

call s:init()
